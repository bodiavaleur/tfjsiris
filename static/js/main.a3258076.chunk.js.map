{"version":3,"sources":["irisModel.js","ui/Input.js","ui/ParamsBlock.js","ui/Button.js","ui/Title.js","App.js","index.js"],"names":["irisModel","modelParams","a","batchSize","learningRate","epochs","csvDataset","tf","csv","columnConfigs","species","isLabel","columnNames","length","countOfFeatures","convertedData","map","xs","ys","labels","Object","values","batch","model","add","dense","inputShape","activation","units","compile","optimizer","adam","loss","surface","name","tab","history","fitDataset","callbacks","onTrainEnd","alert","onEpochEnd","e","logs","push","tfvis","console","log","Input","styled","input","Label","label","ParamsBlock","div","Button","button","Title","h1","App","useState","setModel","valueToPredict","setValueToPredict","params","setParams","trainModel","trainedModel","href","onChange","target","value","defaultValue","JSON","parse","stringify","onClick","predictValues","modelPrediction","predict","dataSync","toggle","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a3258076.chunk.js","sourcesContent":["import * as tf from \"@tensorflow/tfjs\";\nimport * as tfvis from \"@tensorflow/tfjs-vis\";\n\nexport async function irisModel(modelParams) {\n  const { batchSize, learningRate, epochs } = modelParams;\n\n  /* Load dataset */\n  const csvUrl = \"datasets/iris.csv\";\n  const csvDataset = tf.data.csv(csvUrl, {\n    columnConfigs: {\n      species: {\n        isLabel: true,\n      },\n    },\n  });\n\n  /* Convert loaded dataset */\n\n  // Get number of column names and subtract 1 for label of the column\n  const countOfFeatures = (await csvDataset.columnNames()).length - 1;\n  const convertedData = csvDataset\n    .map(({ xs, ys }) => {\n      // Use one-hot encoding\n      const labels = [\n        ys.species === \"setosa\" ? 1 : 0,\n        ys.species === \"virginica\" ? 1 : 0,\n        ys.species === \"versicolor\" ? 1 : 0,\n      ];\n      return { xs: Object.values(xs), ys: Object.values(labels) };\n    })\n    .batch(batchSize);\n\n  /* Define the model */\n  const model = tf.sequential();\n  model.add(\n    tf.layers.dense({\n      inputShape: [countOfFeatures],\n      activation: \"sigmoid\",\n      units: 5,\n    })\n  );\n  model.add(tf.layers.dense({ activation: \"softmax\", units: 3 }));\n  model.compile({\n    optimizer: tf.train.adam(learningRate),\n    loss: \"categoricalCrossentropy\",\n  });\n\n  /* Fit dataset */\n\n  // For visualizing the loss\n  const surface = { name: \"Loss\", tab: \"Training\" };\n  const history = [];\n\n  await model.fitDataset(convertedData, {\n    epochs: epochs,\n    callbacks: {\n      onTrainEnd: () => alert(\"Training is done. Now you can predict a value\"),\n      onEpochEnd: (e, logs) => {\n        history.push(logs);\n        tfvis.show.history(surface, history, [\"loss\"]);\n        console.log(`Epoch: ${e} | Loss: ${logs.loss}`);\n      },\n    },\n  });\n\n  return model;\n}\n\nexport function predict(model, value) {\n  if (value.length !== 4) {\n    alert(\"Tensor should have 4 values\");\n    return;\n  }\n\n  if (model) {\n    const labels = [\"Setosa\", \"Virginica\", \"Versicolor\"];\n    const predictValues = tf.tensor2d(value, [1, 4]);\n    const modelPrediction = tf\n      .argMax(model.predict(predictValues), 1)\n      .dataSync();\n\n    alert(labels[modelPrediction]);\n  } else {\n    alert(\"First you need to train a model\");\n  }\n}\n","import styled from \"styled-components\";\n\nexport const Input = styled.input`\n  width: 100%;\n  height: 25px;\n  border-radius: 7.5px;\n  border: 1px solid #e6e6e6;\n  box-sizing: border-box;\n`;\n\nexport const Label = styled.label`\n  width: 150px;\n  height: 50px;\n  text-align: center;\n  font-size: 0.9rem;\n`;\n","import styled from \"styled-components\";\n\nexport const ParamsBlock = styled.div`\n  height: 300px;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-evenly;\n`;\n","import styled from \"styled-components\";\n\nexport const Button = styled.button`\n  min-width: 100px;\n  height: 35px;\n  margin: 10px 15px;\n  border: none;\n  border-radius: 7.5px;\n  font-weight: 600;\n  background: rgb(0, 122, 255);\n  color: white;\n`;\n","import styled from \"styled-components\";\n\nexport const Title = styled.h1`\n  font-size: 32px;\n`;\n","import { useState } from \"react\";\nimport { irisModel, predict } from \"./irisModel\";\nimport * as tfvis from \"@tensorflow/tfjs-vis\";\nimport { Button, Input, Label, ParamsBlock, Title } from \"./ui\";\n\nexport function App() {\n  const [model, setModel] = useState(null);\n  const [valueToPredict, setValueToPredict] = useState([4.6, 3.4, 1.4, 0.3]);\n  const [params, setParams] = useState({\n    batchSize: 10,\n    learningRate: 0.05,\n    epochs: 20,\n  });\n\n  const trainModel = async () => {\n    const trainedModel = await irisModel(params);\n    setModel(trainedModel);\n  };\n\n  const predictModel = () => predict(model, valueToPredict);\n\n  return (\n    <div>\n      <Title>Iris Classification</Title>\n      <a href=\"https://archive.ics.uci.edu/ml/datasets/iris\">dataset</a>\n      <ParamsBlock>\n        <Label>\n          Batch size:\n          <Input\n            onChange={(e) =>\n              setParams({ ...params, batchSize: +e.target.value })\n            }\n            defaultValue={params.batchSize}\n          />\n        </Label>\n\n        <Label>\n          Learning rate:\n          <Input\n            onChange={(e) =>\n              setParams({ ...params, learningRate: +e.target.value })\n            }\n            defaultValue={params.learningRate}\n          />\n        </Label>\n\n        <Label>\n          Epochs:\n          <Input\n            onChange={(e) => setParams({ ...params, epochs: +e.target.value })}\n            defaultValue={params.epochs}\n          />\n        </Label>\n\n        <Label>\n          Value to predict:\n          <Input\n            onChange={(e) => setValueToPredict(JSON.parse(e.target.value))}\n            defaultValue={JSON.stringify(valueToPredict)}\n          />\n        </Label>\n      </ParamsBlock>\n\n      <Button onClick={trainModel}>Train</Button>\n      <Button onClick={predictModel}>Predict</Button>\n      <Button onClick={() => tfvis.visor().toggle()}>Toggle visor</Button>\n    </div>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {App} from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}